<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Derek Watson]]></title>
  <link href="http://derek-watson.github.com/atom.xml" rel="self"/>
  <link href="http://derek-watson.github.com/"/>
  <updated>2013-01-03T21:15:40-05:00</updated>
  <id>http://derek-watson.github.com/</id>
  <author>
    <name><![CDATA[Derek Watson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MySQL to Redis in One Step]]></title>
    <link href="http://derek-watson.github.com/blog/2013/01/02/mysql-to-redis-in-one-step/"/>
    <updated>2013-01-02T15:26:00-05:00</updated>
    <id>http://derek-watson.github.com/blog/2013/01/02/mysql-to-redis-in-one-step</id>
    <content type="html"><![CDATA[<p>In moving a relatively large table from MySQL to Redis,
you may find that extracting, transforming and loading a row at a time
can be excruciatingly slow. Here&#8217;s a quick trick you can use that pipes the output
of the <code>mysql</code> command directly to <code>redis-cli</code>, bypassing middleware and
allowing both data stores to operate at their peak speed.</p>

<p>Using this technique I was able to reduce my load time of ~8 million rows
from 90 minutes down to two. Shabby? I think not.</p>

<h3>Redis Protocol Output from MySQL</h3>

<p><code>redis-cli</code> has a <a href="http://redis.io/topics/mass-insert">mass-insert</a> mode, specially
designed to execute bulk commands as quickly as possible. Input is expected to
be formatted in raw <a href="http://redis.io/topics/protocol">redis protocol</a>,
which is simple enough to be generated from MySQL SELECT queries. Here we go!</p>

<p>My stats table:</p>

<pre><code>CREATE TABLE events_all_time (
  id int(11) unsigned NOT NULL AUTO_INCREMENT,
  action varchar(255) NOT NULL,
  count int(11) NOT NULL DEFAULT 0,
  PRIMARY KEY (id),
  UNIQUE KEY uniq_action (action)
);
</code></pre>

<p>Desired Redis command to be run for each row:</p>

<pre><code>HSET events_all_time [action] [count]
</code></pre>

<p>SQL statement to produce Redis-protocol-formatted output:</p>

<pre><code>-- events_to_redis.sql

SELECT CONCAT(
  "*4\r\n",
  '$', LENGTH(redis_cmd), '\r\n',
  redis_cmd, '\r\n',
  '$', LENGTH(redis_key), '\r\n',
  redis_key, '\r\n',
  '$', LENGTH(hkey), '\r\n',
  hkey, '\r\n',
  '$', LENGTH(hval), '\r\n',
  hval, '\r'
)
FROM (
  SELECT
  'HSET' as redis_cmd,
  'events_all_time' AS redis_key,
  action AS hkey,
  count AS hval
  FROM events_all_time
) AS t
</code></pre>

<p>Tying it all together:</p>

<pre><code>mysql stats_db --skip-column-names --raw &lt; events_to_redis.sql | redis-cli --pipe
</code></pre>

<p>It&#8217;s important to use the <code>--raw</code> switch so that MySQL doesn&#8217;t rewrite the
crucial newline characters, and <code>--skip-column-names</code> keeps the formatted output
clear of column headers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Christmas Gift]]></title>
    <link href="http://derek-watson.github.com/blog/2012/12/25/a-christmas-gift/"/>
    <updated>2012-12-25T23:34:00-05:00</updated>
    <id>http://derek-watson.github.com/blog/2012/12/25/a-christmas-gift</id>
    <content type="html"><![CDATA[<p>As a Christmas gift to myself, I&#8217;ve decided to resurrect my dcw.ca domain and
put up a simple blog, a place to share some of the more interesting
aspects of my job as a software developer at <a href="http://www.theworkinggroup.ca/">The Working Group</a>,
and possibly some random ramblings that need a place to be.</p>

<p>The site is now running on <a href="http://octopress.org/">Octopress</a>, a Ruby
static-site generator based on <a href="https://github.com/mojombo/jekyll">Jekyll</a> from Github.
Git, in many ways, feels like the right tool for the job when it comes to publishing static content
on the web, and makes me think back to some of the more elaborate CMS sites
I&#8217;ve worked on and how they might have benefited from the use of file system
instead of a complex RDBMS.</p>

<p>Today, static site generators such as Jekyll, Octopress, Middleman or even
<a href="http://jnordberg.github.com/wintersmith/">Wintersmith</a> from the Node.js world,
seem to appeal mostly to developers, and I wonder how far the interface and
usability will need to improve before they appeal to non-developers. Common UI
metaphors such as Save and Revert could help to simplify Git&#8217;s notoriously
complex command-line interface, at the very least.</p>
]]></content>
  </entry>
  
</feed>
